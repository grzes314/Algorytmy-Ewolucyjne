/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package kinematics.gui.labcreator;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import static java.lang.Math.max;
import static java.lang.Math.min;
import static java.lang.Math.abs;
import java.util.ArrayList;
import kinematics.logic.Point;
import kinematics.logic.Rectangle;

/**
 *
 * @author grzes
 */
public class LabDesigner extends javax.swing.JPanel
{
    public final LabData labData;
    private java.awt.Point start = new java.awt.Point(100,100);
    private java.awt.Point curr = new java.awt.Point(200,200);
    private boolean released = true;

    /**
     * Creates new form LabDesigner
     */
    public LabDesigner(LabData labData)
    {
        this.labData = labData;
        initComponents();
    }
    
    public LabDesigner(Point minArea, Point maxArea)
    {
        this.labData = new LabData(minArea, maxArea);
        initComponents();
    }

    private Point fromGUIToLogic(java.awt.Point coord)
    {
        Dimension d = getSize();
        double H = d.height;
        double W = d.width;
        double h = labData.maxArea.y - labData.minArea.y;
        double w = labData.maxArea.x - labData.minArea.x;
        double y = coord.y / H * h + labData.minArea.y;
        double x = coord.x / W * w + labData.minArea.x;
        return new Point(x, y);
    }
    
    private java.awt.Point fromLogicToGUI(Point coord)
    {
        Dimension d = getSize();
        double H = d.height;
        double W = d.width;
        double h = labData.maxArea.y - labData.minArea.y;
        double w = labData.maxArea.x - labData.minArea.x;
        double x = (coord.x - labData.minArea.x) * W / w;
        double y = (coord.y - labData.minArea.y) * H / h;
        return new java.awt.Point((int) x, (int) y);
    }
    
    private void mousePressed(java.awt.Point point)
    {
        start = point;
        curr = point;
        released = false;
    }

    private void mouseReleased(java.awt.Point finish)
    {
        Point p1 = fromGUIToLogic(start);
        Point p2 = fromGUIToLogic(finish);
        labData.addRectangle(min(p1.x, p2.x), min(p1.y, p2.y), max(p1.x, p2.x), max(p1.y, p2.y));
        released = true;
        repaint();
        Toolkit.getDefaultToolkit().sync();
    }
    
    @Override
    public void paint(Graphics gr)
    {
        super.paint(gr);
        gr.setColor(new Color(128,64,0));
        for (Rectangle rect: labData.getRects())
            drawRectangle(gr, rect);
        if (!released)
            drawRectangle(gr, start, curr);
    }
    
    private void drawRectangle(Graphics gr, Rectangle rect)
    {
        double x1 =  (rect.from.x - rect.w / 2.0);
        double y1 =  (rect.from.y - rect.h / 2.0);
        double x2 =  (rect.from.x + rect.w / 2.0);
        double y2 =  (rect.from.y + rect.h / 2.0);
        java.awt.Point p1 = fromLogicToGUI(new Point(x1, y1));
        java.awt.Point p2 = fromLogicToGUI(new Point(x2, y2));
        gr.fillRect((int) p1.x, (int) p1.y, (int) (p2.x - p1.x), (int) (p2.y - p1.y));
    }
    
    private void drawRectangle(Graphics gr, java.awt.Point p1, java.awt.Point p2)
    {
        gr.fillRect(min(p1.x, p2.x), min(p1.y, p2.y), abs(p2.x - p1.x), abs(p2.y - p1.y));
    }
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setBackground(java.awt.Color.white);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseMoved(java.awt.event.MouseEvent evt)
            {
                formMouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMousePressed
    {//GEN-HEADEREND:event_formMousePressed
        mousePressed(evt.getPoint());
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseReleased
    {//GEN-HEADEREND:event_formMouseReleased
        mouseReleased(evt.getPoint());
    }//GEN-LAST:event_formMouseReleased

    private void formMouseMoved(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseMoved
    {//GEN-HEADEREND:event_formMouseMoved
    }//GEN-LAST:event_formMouseMoved

    private void formMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseDragged
    {//GEN-HEADEREND:event_formMouseDragged
        curr = evt.getPoint();
        repaint();
        Toolkit.getDefaultToolkit().sync();
    }//GEN-LAST:event_formMouseDragged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
